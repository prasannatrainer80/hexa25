xsuper keyword : If you want to pass values from derived class to base class, then we need the help of super keyword. It has 2 forms as 

	(i) super as a keyword

	(ii) super as a constructor

_____________________________________________________________________________________

class Quiz1 {
   public static void main(String[] args) {
	int x;
	System.out.println(x);
  }
}

It throws compile time error as use of unassigned value. 

class Quiz2 {
    public static void main(String[] args) {
	System.out.println("5" + 3+8); // 538
	System.out.println("5" + (3+8)); // 511
	System.out.println("5 + 3"+8); // 5+38
   }
}

class Quiz3 {
    public static void main(String[] args) {
	String str="sam";
        int a=10, b= 20, c=30;
	System.out.println(a+b+c+str);
	System.out.println(str+a+b+c);
	System.out.println(a+b+str+c);
    }
}

class Quiz4 {
	public static void main(String[] args) {
	    int i = 10;
	    int j = i++;
	    System.out.println(i + " " +j);
	}
}

class Quiz5 {
	static boolean climate;
	public static void main(String[] args) {
		System.out.println(climate);
	}
}

class Quiz6 {
	public static void main(String[] args) {
	   int i=8;
	   while(i < 9) {
	      System.out.println("Hi");
	      i--;
	   }
}

class Quiz7 {
	public static void main(String[] args) {
	  boolean flag = (4 > 3) && (5 < 4);
	  System.out.println(flag);
	}
}

class Quiz8 {
	public static void main(String[] args) {
	  boolean flag = (4 > 3) || (5 < 4);
	  System.out.println(flag);
	}
}

final keyword : If you define any variable as final, we cannot modify the value. 

final classes cannot be inherited

final methods cannot be overridden 

enum : If you want to make any group of constants then we need the help of Enum. 

In Java, is-a relation also known as inheritance, signifies that a subclass is specialized vesion of its superclass. We can inherit properties and behaviours by using extends keyword.

Advantages : 
_____________

	-> Code Reusability : Subclasses inherit properties and behaviours from their super class

	-> Hierarchy : Establishes the clear hierarchy between classes, making it easier to understand and maintain the code

	-> Polymorphism : Enables polymorphism, where objects of different classes can be treated as objects of a common superclass. 

Properties : Provides an opportunity to protect a field in a class. If you want to control the internal behavior of specific entity, then we need the help of properties. 

There are various types of properties as

1) Read Only

2) Write Only

3) Read-Write Properties 

Interface : Java does not support the concept of multiple inheritance, to achieve this
we need the help of interfaces. 

An interface contains method declaration, and the implementation can be done in the 
corresponding class, you can add more than one interface to the particular class. 

Difference between interface and abstract class 
________________________________________________

-> An abstract class contains abstract and non-abstract methods, where interface
contains only abstract methods.

-> Interface methods are public and abstract by default. 

-> Multiple inheritance can be achieved by using interfaces

-> An interface can be called from anywhere to anywhere. 

interface interface_name
{
    method1();
    method2();
}

An interface can be added to the class, by using implements keyword. 

_____________________________________________________________________________________


1) Write a program to read a sentence using scanner and display all alternate words in reverse order 

Example : 

welcome to java programming thank you

welcome ot java gnimmargorp thank uoy

2) Write a program to read a string and search for a word in the string and count how many times the word existing

3) Write a program to find length of string without using string functions

4) Implement the below string functions of your own

length(),
toUpperCase(),
toLowerCase(),
chatAt()
indexOf()

5) Write a java program to remove all the spaces from the given string

















	


	

