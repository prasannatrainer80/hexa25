1) Which Package allows you to perform junit 

a) org.jmock.test b) org.junit.test c) org.test d) None

2) Which annotation used as if method to be executed only once in the entire test life cycle before test case

a) @BeforeClass b) @AfterClass c) @Before d) @After 

3) Which annotation used for everytime, the before test case will be executed

a) @BeforeClass b) @AfterClass c) @Before d) @After 

4) Which annotation used for everytime, at the end of test case 

a) @BeforeClass b) @AfterClass c) @Before d) @After 

5) What would be output for this program

        int[] a=new int[]{1,2};
        int[] b =new int[]{1,2};
        assertArrayEquals("hello",a,b);

A) Test Case Passes successfully B) Compile Time Error C) Runtime Error D) None

6) What is the output for below code

import static org.junit.Assert.assertTrue;
import static org.junit.Assert.assertEquals;
import org.junit.After;  
import org.junit.AfterClass;  
import org.junit.Before;  
import org.junit.BeforeClass;

import org.junit.Test;


public class DemoTest {

    static Demo obj;

    @BeforeClass 
    public static void setUp() {
        obj = new Demo();
        System.out.println("Global Object Created...");
    }

    @AfterClass 
    public static void cleanUp() {
        obj = null;
        System.out.println("Object Deallocated...");
    }

    @Before 
    public void showInfo() {
        System.out.println("Test Case Started...");
    }

    @After 
    public void clearInfo() {
        System.out.println("Test Case Ended...");
    }
    
    @Test 
    public void testSayHello() {
        // Demo obj = new Demo();
        assertEquals("Welcome to Junit...", obj.sayHello());
    }

}

A) Compile time Error B) Global Object Created...Test Case Started...Test Case Ended...
Object Deallocated... C) Runtime Error D) Global Object Created...
Object Deallocated... 

7) What is the output for below code

public void before() {
    System.out.println("before");
   }
   @After 
   public void after() {
    System.out.println("After");
  }
   @Test
   public void test1() {
    System.out.println("Test 1");
   }

   @Test
   public void test2() {
    System.out.println("Test2");
   }
}

A) Before After Test1 Test 2 B) Test1 After Test2 C) Test1 After Test2 After D) None

8)

public class JunitTest {
 
   @BeforeClass
   public static void beforeClass() {
     System.out.println("BeforeClass...");
   }
   @AfterClass 
   public static void afterClass() {
     System.out.println("AfterClass...");
   }

   public void before() {
    System.out.println("Before...");
   }
   @After 
   public void after() {
    System.out.println("After...");
   }
}

A) No Output as no valid Test case B) Compile Time Error C) Runtime Error D) Before...After...


9) 

public class DummyTest {
   @BeforeClass
   public static void beforeClass() {
     System.out.println("BeforeClass...");
   }
   @AfterClass 
   public static void afterClass() {
     System.out.println("AfterClass...");
   }

   @Test 
   public void testMe() {
       assertEquals("Hi","Hi");
   }
   public void before() {
    System.out.println("Before...");
   }
   @After 
   public void after() {
    System.out.println("After...");
   }
}

A) BeforeClass... Before...After...AfterClass... B) BeforeClass...After...AfterClass...
C) Compile Time Error D) Runtime Error
10) 

@BeforeClass
   public static void beforeClass() {
     System.out.println("BeforeClass...");
   }
   @AfterClass 
   public static void afterClass() {
     System.out.println("AfterClass...");
   }
   @Before
   public void before() {
    System.out.println("Before...");
   }
   @Test
   public void testSayHello() {
     assertEquals("Hello","Hello");
   }
   @After 
   public void after() {
    System.out.println("After...");
   }

A) BeforeClass...Before...After...AfterClass...
B) BeforeClass...AfterClass...Before...After...
C) BeforeClass...After...
D) BeforeClass...After...
11)

public class Junit4Test {
  @Test 
  public void test() {
    Assert.assertTrue(false);
  }
  @Test
  public void test2() {
    assert false;
  }
}
A) False true B) False False C) Compile Time Error D) Runtime Error

12) 


 @Test 
   public void testMe() {
       assertEquals("August Batch","Hi","Hi");
   }

    @Test 
   public void testFail() {
       assertEquals("November Batch","Hi","Hello");
   }

A) Test Case pass B) Test Case Fail and Error Message as "November Batch" 
C) Runtime Error D) Compile Time Error 

13)

public class DemoTest {

    static Demo obj;

    @BeforeClass 
    public static void setUp() {
        obj = new Demo();
        System.out.println("Global Object Created...");
    }

    @AfterClass 
    public static void cleanUp() {
        obj = null;
        System.out.println("Object Deallocated...");
    }

    @Before 
    public void showInfo() {
        System.out.println("Test Case Started...");
    }

    @After 
    public void clearInfo() {
        System.out.println("Test Case Ended...");
    }
    
}

A) No Output as no valid @Test case B) Runtime Error C) Compile Time Error D) Test Case Ended...

14)

public class DemoTest {

    static Demo obj;

    public static void setUp() {
        obj = new Demo();
        System.out.println("Global Object Created...");
    }

    @AfterClass 
    public static void cleanUp() {
        obj = null;
        System.out.println("Object Deallocated...");
    }

    @Before 
    public void showInfo() {
        System.out.println("Test Case Started...");
    }

    public void clearInfo() {
        System.out.println("Test Case Ended...");
    }
    
    @Test 
    public void testSayHello() {
        // Demo obj = new Demo();
        assertEquals("Welcome to Junit...", obj.sayHello());
    }

    @Test 
    public void testSum() {
        // Demo obj = new Demo();
        assertEquals(5, obj.sum(2,3));
    }

    @Test 
    public void testMax3() {
        // Demo obj = new Demo();
        assertEquals(5, obj.max3(2,3,5));
    }
}

A) No Output as no valid @Test case B) Runtime Error C) Compile Time Error as Object is NULL D) Test Case Ended...

15) A Thread can be create by
A) Extending Thread Class B) Implements Runnable C) Both A and B D) None Of Above

16) What would be output for below code
Public class Test implements Runnable
{
	Public static void main(String[] args) {
		Test t = new Test();
		t.run();	
		t.start();
}
	Public void run() {
		System.out.println(“run-test”);
	} 
}
a)	run-test run-test b) run-test c) Compile Time Error D) Runtime Error

17)  What is multithreaded programming?
a) It’s a process in which two different processes run simultaneously
b) It’s a process in which two or more parts of same process run simultaneously
c) It’s a process in which many different process are able to access same information
d) It’s a process in which a single process can access information from many sources

18) Which method used to invoke the thread

a) run() b) start() c) sleep() d) abort()

19) Which method contains the actual code to be executed once thread starts

a) run() b) start() c) sleep() d) abort()

20)  What is dead thread in java ?
A A thread that is waiting for I/O operation
B A thread completed its run method
C A thread is in sleep
D None of these

21) Select the valid thread state transition?
A ready to running
B ready to waiting
C waiting to running
D running to ready

22) Thread priority in Java is?
A Integer B Float C double D long

23) You can create thread safe methods by using

A) lock B) synchronized C) mutex d) none

24) Which of the below class contains synchronized methods

A) ArrayList B) HashMap C) HashTable D) LinkedList

25) Which methods cannot be tested by the JUnit test class?
a) protected methods
b) methods with void return type
c) private methods
d) public methods